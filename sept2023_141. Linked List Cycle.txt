================================================================ C++ ============================================================
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head == NULL || head->next == NULL)
            return false;

        ListNode* fast = head;
        ListNode* slow = head;

        while(fast != NULL)
        {
            fast = fast->next;
            if(fast != NULL)
                fast = fast->next;
            
            slow = slow->next;

            if(slow == fast)
                return true;

        }

        return false;
    }
};

=========================================================== Python ============================================================

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        if head == None or head.next == None:
            return False
        
        fast = head
        slow = head

        while fast != None:
            fast = fast.next

            if fast:
                fast = fast.next

            slow = slow.next

            if slow == fast:
                return True
            
        return False
