Python:

class Solution:
    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:
        q = []
        m = len(mat)
        n = len(mat[0])
        vis = [[0 for i in range(n)] for j in range(m)]
        ans = [[0 for i in range(n)] for j in range(m)]

        delr = [-1, 0, 1, 0]
        delc = [0, 1, 0, -1]

        

        for i in range(m):
            for j in range(n):
                if mat[i][j] == 0:
                    q.append((i,j))
                    vis[i][j] = 1

        while(q):
            row = q[0][0]
            col = q[0][1]

            q.pop(0)

            for i in range(4):
                newrow = row + delr[i]
                newcol = col + delc[i]

                if newrow >= 0 and newcol >= 0 and newrow < m and newcol < n and vis[newrow][newcol] != 1 :
                    ans[newrow][newcol] = ans[row][col] + 1
                    vis[newrow][newcol] = 1
                    q.append((newrow, newcol))

        return ans
============================================================================================================================================
C++:


class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
    int m = mat.size();
    int n = mat[0].size();

    queue<pair<int,int>> q;

    vector<vector<int>> ans(m, vector<int>(n, 0));
    vector<vector<int>> vis(m, vector<int>(n, 0));

    for(int i=0; i<m; i++)
    {
        for(int j=0; j<n; j++)
        {
            if(mat[i][j] == 0)
            {
            q.push({i,j});
            vis[i][j] = 1;
            }

        }
    }     

    int delr[] = {-1, 0, 1, 0};
    int delc[] = {0, 1, 0, -1};

    while(!q.empty())
    {
        int row = q.front().first;
        int col = q.front().second;

        q.pop();


        for(int i=0; i<4; i++)
        {
            int newrow = row + delr[i];
            int newcol = col + delc[i];

            if(newrow >= 0 && newcol >= 0 && newrow < m && newcol < n && vis[newrow][newcol] != 1 )
            {
                ans[newrow][newcol] = ans[row][col] + 1;
                q.push({newrow,newcol});
                vis[newrow][newcol] = 1;
            }
        }
    } 
    
    return ans;
    }
};
