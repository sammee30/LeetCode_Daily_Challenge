class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        dp = {}

        def solve(m, n, row, col):
            if row == m-1 and col == n-1:
                return 1
            
            if row >= m or col >= n or obstacleGrid[row][col] == 1:
                return 0

            if (row, col) in dp:
                return dp[(row, col)]
            
            right = solve(m, n, row, col+1)
            down = solve(m, n, row+1, col)
            
            dp[(row, col)] = right+down
            return dp[(row, col)]
        
        if obstacleGrid[0][0] == 1:
            return 0;
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        if obstacleGrid[m-1][n-1] == 1:
            return 0      
        return solve(m, n, 0, 0)
